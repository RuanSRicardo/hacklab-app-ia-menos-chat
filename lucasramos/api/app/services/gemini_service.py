import google.generativeai as genai
import json
import hashlib
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from app.core.config import settings
from app.schemas.turismo import RotaTuristica, PontoTuristico, CoordenadaGPS
import logging

logger = logging.getLogger(__name__)


class GeminiService:
    """Service para integra√ß√£o com Google Gemini AI com sistema de cache"""

    # Cache est√°tico para compartilhar entre inst√¢ncias
    _cache: Dict[str, Dict[str, Any]] = {}
    _cache_ttl = timedelta(hours=24)  # Cache expira em 24 horas

    def __init__(self):
        """Inicializar servi√ßo Gemini"""
        if not settings.GEMINI_API_KEY:
            raise ValueError(
                "GEMINI_API_KEY n√£o configurada. Configure no arquivo .env"
            )

        genai.configure(api_key=settings.GEMINI_API_KEY)
        self.model = genai.GenerativeModel("gemini-2.5-flash")

    def _gerar_cache_key(
        self,
        cidade_origem: str,
        cidade_destino: str,
        uf_origem: Optional[str] = None,
        uf_destino: Optional[str] = None,
        preferencias: Optional[str] = None,
    ) -> str:
        """Gerar chave √∫nica para cache baseada nos par√¢metros da consulta"""
        # Normalizar dados para cache
        origem = f"{cidade_origem.lower().strip()}"
        if uf_origem:
            origem += f"-{uf_origem.upper().strip()}"

        destino = f"{cidade_destino.lower().strip()}"
        if uf_destino:
            destino += f"-{uf_destino.upper().strip()}"

        prefs = preferencias.lower().strip() if preferencias else ""

        # Criar string √∫nica e gerar hash
        cache_string = f"{origem}|{destino}|{prefs}"
        return hashlib.md5(cache_string.encode()).hexdigest()

    def _limpar_cache_expirado(self):
        """Limpar entradas expiradas do cache"""
        agora = datetime.now()
        keys_expiradas = []

        for key, dados in self._cache.items():
            if agora - dados["timestamp"] > self._cache_ttl:
                keys_expiradas.append(key)

        for key in keys_expiradas:
            del self._cache[key]
            logger.info(f"Cache expirado removido: {key}")

    def _salvar_no_cache(self, cache_key: str, rota: RotaTuristica):
        """Salvar resultado no cache"""
        self._cache[cache_key] = {"rota": rota, "timestamp": datetime.now()}
        logger.info(f"Resultado salvo no cache: {cache_key}")

    def _buscar_no_cache(self, cache_key: str) -> Optional[RotaTuristica]:
        """Buscar resultado no cache"""
        if cache_key in self._cache:
            dados = self._cache[cache_key]

            # Verificar se n√£o expirou
            if datetime.now() - dados["timestamp"] <= self._cache_ttl:
                logger.info(f"Cache hit: {cache_key}")
                return dados["rota"]
            else:
                # Remover entrada expirada
                del self._cache[cache_key]
                logger.info(f"Cache expirado removido: {cache_key}")

        return None

    @classmethod
    def obter_estatisticas_cache(cls) -> Dict[str, Any]:
        """Obter estat√≠sticas do cache"""
        total_entradas = len(cls._cache)
        agora = datetime.now()
        entradas_validas = sum(
            1
            for dados in cls._cache.values()
            if agora - dados["timestamp"] <= cls._cache_ttl
        )

        return {
            "total_entradas": total_entradas,
            "entradas_validas": entradas_validas,
            "entradas_expiradas": total_entradas - entradas_validas,
            "cache_ttl_horas": cls._cache_ttl.total_seconds() / 3600,
        }

    @classmethod
    def limpar_cache(cls):
        """Limpar todo o cache"""
        cls._cache.clear()
        logger.info("Cache completamente limpo")

    def _criar_prompt_turismo(
        self,
        cidade_origem: str,
        cidade_destino: str,
        uf_origem: Optional[str] = None,
        uf_destino: Optional[str] = None,
        preferencias: Optional[str] = None,
    ) -> str:
        """Criar prompt estruturado para consulta tur√≠stica"""

        origem = f"{cidade_origem}"
        if uf_origem:
            origem += f", {uf_origem}"

        destino = f"{cidade_destino}"
        if uf_destino:
            destino += f", {uf_destino}"

        preferencias_texto = ""
        if preferencias:
            preferencias_texto = f"\nPrefer√™ncias do usu√°rio: {preferencias}"

        prompt = f"""
            Voc√™ √© um especialista em turismo brasileiro. Crie uma rota tur√≠stica detalhada entre duas cidades brasileiras.

            CIDADES:
            - Origem: {origem}
            - Destino: {destino}
            {preferencias_texto}

            INSTRU√á√ïES IMPORTANTES:
            1. Responda **EXCLUSIVAMENTE** com um **JSON v√°lido**, sem explica√ß√µes, coment√°rios, nem texto antes ou depois.
            2. Inclua **pontos tur√≠sticos relevantes e acess√≠veis** tanto nas cidades de origem e destino quanto **ao longo da rota entre elas**.
            3. Todos os pontos tur√≠sticos devem ter **coordenadas GPS reais e verific√°veis**, compat√≠veis com o **OpenStreetMap** (ex: https://www.openstreetmap.org/).
            4. Para cada ponto tur√≠stico, adicione informa√ß√µes detalhadas e realistas:
            - Descri√ß√£o do local e destaque cultural/natural.
            - Tempo estimado de visita.
            - Categoria (hist√≥rico, natural, cultural, religioso ou gastron√¥mico).
            - Endere√ßo aproximado.
            - Hor√°rio de funcionamento (com dias e hor√°rios reais ou plaus√≠veis).
            - Valor da entrada (exato ou estimado; use ‚ÄúGratuito‚Äù se aplic√°vel).
            - Dicas pr√°ticas (ex: evitar hor√°rios de pico, levar protetor solar, usar cal√ßado confort√°vel etc).
            5. Inclua no final:
            - Recomenda√ß√µes gerais para o trajeto (ex: seguran√ßa, clima, estrada, paradas).
            - Melhor √©poca para visitar (m√™s ou esta√ß√£o do ano mais indicada).

            FORMATO JSON OBRIGAT√ìRIO:
            
            {{
            "cidade_origem": "{origem}",
            "cidade_destino": "{destino}",
            "distancia_aproximada": "XXX km",
            "tempo_viagem_estimado": "X horas de carro",
            "pontos_turisticos": [
                {{
                "nome": "Nome do Ponto Tur√≠stico",
                "descricao": "Descri√ß√£o detalhada e interessante do local",
                "coordenadas": {{
                    "latitude": -23.5505,
                    "longitude": -46.6333
                }},
                "tempo_visita_estimado": "2 horas",
                "categoria": "hist√≥rico|natural|cultural|religioso|gastron√¥mico",
                "endereco": "Endere√ßo aproximado",
                "horario_funcionamento": "Seg-Dom 9h √†s 17h",
                "valor_entrada": "Gratuito ou R$ XX",
                "dicas_importantes": "Dicas √∫teis para a visita"
                }}
            ],
            "recomendacoes_gerais": "Recomenda√ß√µes gerais para a viagem",
            "melhor_epoca_visita": "Melhor √©poca para visitar a regi√£o"
            }}

            REQUISITOS DE QUALIDADE:
            - Use **apenas informa√ß√µes reais e verific√°veis** (sem locais fict√≠cios).
            - As coordenadas devem funcionar **corretamente no OpenStreetMap**.
            - Cada atra√ß√£o deve ser **√∫nica e bem descrita**.
            - N√£o inclua hospedagem, restaurantes ou rodovias ‚Äî apenas **atra√ß√µes tur√≠sticas**.
            - A resposta deve ser **um √∫nico JSON v√°lido**, sem texto fora das chaves.
            """
        return prompt

    async def consultar_rota_turistica(
        self,
        cidade_origem: str,
        cidade_destino: str,
        uf_origem: Optional[str] = None,
        uf_destino: Optional[str] = None,
        preferencias: Optional[str] = None,
    ) -> RotaTuristica:
        """
        Consultar Gemini para obter rota tur√≠stica (com cache)

        Args:
            cidade_origem: Nome da cidade de origem
            cidade_destino: Nome da cidade de destino
            uf_origem: UF da cidade origem (opcional)
            uf_destino: UF da cidade destino (opcional)
            preferencias: Prefer√™ncias de turismo (opcional)

        Returns:
            RotaTuristica: Dados estruturados da rota tur√≠stica

        Raises:
            Exception: Se houver erro na consulta ou parsing JSON
        """

        try:
            logger.info(
                f"Consultando rota tur√≠stica: {cidade_origem} ‚Üí {cidade_destino}"
            )

            # Gerar chave do cache
            cache_key = self._gerar_cache_key(
                cidade_origem=cidade_origem,
                cidade_destino=cidade_destino,
                uf_origem=uf_origem,
                uf_destino=uf_destino,
                preferencias=preferencias,
            )

            # Limpar cache expirado
            self._limpar_cache_expirado()

            # Tentar buscar no cache primeiro
            rota_cache = self._buscar_no_cache(cache_key)
            if rota_cache:
                logger.info(f"üöÄ Resposta do cache (instant√¢nea): {cache_key[:8]}...")
                return rota_cache

            # Se n√£o encontrou no cache, consultar Gemini
            logger.info(f"ü§ñ Consultando Gemini (primeira vez): {cache_key[:8]}...")

            # Criar prompt estruturado
            prompt = self._criar_prompt_turismo(
                cidade_origem=cidade_origem,
                cidade_destino=cidade_destino,
                uf_origem=uf_origem,
                uf_destino=uf_destino,
                preferencias=preferencias,
            )

            # Consultar Gemini
            response = await self._consultar_gemini_async(prompt)

            # Parsing do JSON
            rota_data = self._parse_response_json(response)

            # Validar e criar objeto Pydantic
            rota = self._criar_rota_turistica(rota_data)

            # Salvar no cache
            self._salvar_no_cache(cache_key, rota)

            logger.info(
                f"Rota tur√≠stica criada com {len(rota.pontos_turisticos)} pontos"
            )
            return rota

        except Exception as e:
            logger.error(f"Erro ao consultar rota tur√≠stica: {e}")
            raise Exception(f"Erro na consulta ao Gemini: {str(e)}")

    async def _consultar_gemini_async(self, prompt: str) -> str:
        """Consulta ass√≠ncrona ao Gemini"""
        try:
            response = self.model.generate_content(prompt)

            if not response or not response.text:
                raise Exception("Resposta vazia do Gemini")

            return response.text.strip()

        except Exception as e:
            logger.error(f"Erro na consulta ao Gemini: {e}")
            raise Exception(f"Falha na comunica√ß√£o com Gemini: {str(e)}")

    def _parse_response_json(self, response_text: str) -> Dict[str, Any]:
        """Parse da resposta JSON do Gemini"""
        try:
            # Limpar poss√≠vel texto extra
            response_clean = response_text.strip()

            # Remover markdown se presente
            if response_clean.startswith("```json"):
                response_clean = response_clean[7:]
            if response_clean.endswith("```"):
                response_clean = response_clean[:-3]

            response_clean = response_clean.strip()

            # Parse JSON
            data = json.loads(response_clean)

            if not isinstance(data, dict):
                raise ValueError("Resposta n√£o √© um objeto JSON v√°lido")

            return data

        except json.JSONDecodeError as e:
            logger.error(f"Erro no parsing JSON: {e}")
            logger.error(f"Resposta recebida: {response_text[:500]}...")
            raise Exception(f"Resposta do Gemini n√£o √© um JSON v√°lido: {str(e)}")

    def _criar_rota_turistica(self, data: Dict[str, Any]) -> RotaTuristica:
        """Criar objeto RotaTuristica a partir dos dados"""
        try:
            # Validar campos obrigat√≥rios
            if "pontos_turisticos" not in data:
                data["pontos_turisticos"] = []

            # Processar pontos tur√≠sticos
            pontos_turisticos = []
            for ponto_data in data.get("pontos_turisticos", []):
                try:
                    # Criar coordenadas
                    coord_data = ponto_data.get("coordenadas", {})
                    coordenadas = CoordenadaGPS(
                        latitude=coord_data.get("latitude", 0.0),
                        longitude=coord_data.get("longitude", 0.0),
                    )

                    # Criar ponto tur√≠stico
                    ponto = PontoTuristico(
                        nome=ponto_data.get("nome", "Nome n√£o informado"),
                        descricao=ponto_data.get(
                            "descricao", "Descri√ß√£o n√£o dispon√≠vel"
                        ),
                        coordenadas=coordenadas,
                        tempo_visita_estimado=ponto_data.get(
                            "tempo_visita_estimado", "N√£o informado"
                        ),
                        categoria=ponto_data.get("categoria", "geral"),
                        endereco=ponto_data.get("endereco"),
                        horario_funcionamento=ponto_data.get("horario_funcionamento"),
                        valor_entrada=ponto_data.get("valor_entrada"),
                        dicas_importantes=ponto_data.get("dicas_importantes"),
                    )

                    pontos_turisticos.append(ponto)

                except Exception as e:
                    logger.warning(f"Erro ao processar ponto tur√≠stico: {e}")
                    continue

            # Criar rota tur√≠stica
            rota = RotaTuristica(
                cidade_origem=data.get("cidade_origem", "N√£o informado"),
                cidade_destino=data.get("cidade_destino", "N√£o informado"),
                distancia_aproximada=data.get("distancia_aproximada"),
                tempo_viagem_estimado=data.get("tempo_viagem_estimado"),
                pontos_turisticos=pontos_turisticos,
                recomendacoes_gerais=data.get("recomendacoes_gerais"),
                melhor_epoca_visita=data.get("melhor_epoca_visita"),
            )

            return rota

        except Exception as e:
            logger.error(f"Erro ao criar RotaTuristica: {e}")
            raise Exception(f"Erro ao processar dados da rota: {str(e)}")
