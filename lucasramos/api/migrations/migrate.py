"""
Sistema de Migration Manager

Este script gerencia a execu√ß√£o das migra√ß√µes do banco de dados de forma ordenada.
"""

import sys
import os
import importlib.util
from pathlib import Path
from sqlalchemy import create_engine, text
from typing import List, Dict

# Adicionar o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.config import settings

class MigrationManager:
    """Gerenciador de migra√ß√µes do banco de dados"""
    
    def __init__(self):
        self.migrations_dir = Path(__file__).parent
        self.engine = create_engine(settings.DATABASE_URL)
        self._ensure_migration_table()
    
    def _ensure_migration_table(self):
        """Criar tabela de controle de migra√ß√µes se n√£o existir"""
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS schema_migrations (
            version VARCHAR(10) PRIMARY KEY,
            applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            description TEXT
        );
        """
        
        with self.engine.connect() as conn:
            conn.execute(text(create_table_sql))
            conn.commit()
    
    def get_applied_migrations(self) -> List[str]:
        """Obter lista de migra√ß√µes j√° aplicadas"""
        with self.engine.connect() as conn:
            result = conn.execute(text(
                "SELECT version FROM schema_migrations ORDER BY version"
            ))
            return [row[0] for row in result]
    
    def get_available_migrations(self) -> List[Dict]:
        """Obter lista de migra√ß√µes dispon√≠veis"""
        migrations = []
        
        for file_path in sorted(self.migrations_dir.glob("*.py")):
            if file_path.name.startswith("__"):
                continue
                
            if file_path.name == "migrate.py":
                continue
            
            # Extrair n√∫mero da migra√ß√£o do nome do arquivo
            parts = file_path.stem.split("_", 1)
            if len(parts) >= 2:
                version = parts[0]
                description = parts[1].replace("_", " ").title()
                
                migrations.append({
                    "version": version,
                    "description": description,
                    "file_path": file_path,
                    "module_name": file_path.stem
                })
        
        return migrations
    
    def load_migration_module(self, file_path: Path):
        """Carregar m√≥dulo de migra√ß√£o dinamicamente"""
        spec = importlib.util.spec_from_file_location("migration", file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module
    
    def apply_migration(self, migration: Dict):
        """Aplicar uma migra√ß√£o espec√≠fica"""
        print(f"\nüì¶ Aplicando migra√ß√£o {migration['version']}: {migration['description']}")
        
        try:
            # Carregar e executar migra√ß√£o
            module = self.load_migration_module(migration['file_path'])
            
            if hasattr(module, 'upgrade'):
                module.upgrade()
                
                # Registrar migra√ß√£o como aplicada
                with self.engine.connect() as conn:
                    conn.execute(text("""
                        INSERT INTO schema_migrations (version, description) 
                        VALUES (:version, :description)
                        ON CONFLICT (version) DO NOTHING
                    """), {
                        "version": migration['version'],
                        "description": migration['description']
                    })
                    conn.commit()
                
                print(f"‚úÖ Migra√ß√£o {migration['version']} aplicada com sucesso!")
                return True
            else:
                print(f"‚ö†Ô∏è Migra√ß√£o {migration['version']} n√£o possui fun√ß√£o 'upgrade'")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao aplicar migra√ß√£o {migration['version']}: {e}")
            return False
    
    def rollback_migration(self, migration: Dict):
        """Reverter uma migra√ß√£o espec√≠fica"""
        print(f"\nüîÑ Revertendo migra√ß√£o {migration['version']}: {migration['description']}")
        
        try:
            # Carregar e executar rollback
            module = self.load_migration_module(migration['file_path'])
            
            if hasattr(module, 'downgrade'):
                module.downgrade()
                
                # Remover registro da migra√ß√£o
                with self.engine.connect() as conn:
                    conn.execute(text(
                        "DELETE FROM schema_migrations WHERE version = :version"
                    ), {"version": migration['version']})
                    conn.commit()
                
                print(f"‚úÖ Migra√ß√£o {migration['version']} revertida com sucesso!")
                return True
            else:
                print(f"‚ö†Ô∏è Migra√ß√£o {migration['version']} n√£o possui fun√ß√£o 'downgrade'")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao reverter migra√ß√£o {migration['version']}: {e}")
            return False
    
    def migrate_up(self):
        """Aplicar todas as migra√ß√µes pendentes"""
        print("üöÄ Iniciando processo de migra√ß√£o...")
        print("=" * 60)
        
        applied = self.get_applied_migrations()
        available = self.get_available_migrations()
        
        print(f"üìä Migra√ß√µes aplicadas: {len(applied)}")
        print(f"üì¶ Migra√ß√µes dispon√≠veis: {len(available)}")
        
        # Filtrar migra√ß√µes pendentes
        pending = [m for m in available if m['version'] not in applied]
        
        if not pending:
            print("\n‚úÖ Todas as migra√ß√µes est√£o em dia!")
            return
        
        print(f"\nüîÑ Migra√ß√µes pendentes: {len(pending)}")
        
        # Aplicar migra√ß√µes pendentes
        success_count = 0
        for migration in pending:
            if self.apply_migration(migration):
                success_count += 1
            else:
                print(f"\n‚ùå Falha ao aplicar migra√ß√£o {migration['version']}. Parando...")
                break
        
        print("\n" + "=" * 60)
        print(f"‚úÖ Processo conclu√≠do! {success_count}/{len(pending)} migra√ß√µes aplicadas.")
    
    def migrate_down(self, steps: int = 1):
        """Reverter as √∫ltimas N migra√ß√µes"""
        print(f"üîÑ Revertendo as √∫ltimas {steps} migra√ß√£o(√µes)...")
        print("=" * 60)
        
        applied = self.get_applied_migrations()
        available = self.get_available_migrations()
        
        if not applied:
            print("‚ö†Ô∏è Nenhuma migra√ß√£o para reverter!")
            return
        
        # Ordenar migra√ß√µes aplicadas em ordem decrescente
        applied.reverse()
        
        # Reverter as √∫ltimas N migra√ß√µes
        success_count = 0
        for i in range(min(steps, len(applied))):
            version = applied[i]
            migration = next((m for m in available if m['version'] == version), None)
            
            if migration:
                if self.rollback_migration(migration):
                    success_count += 1
                else:
                    print(f"\n‚ùå Falha ao reverter migra√ß√£o {version}. Parando...")
                    break
            else:
                print(f"‚ö†Ô∏è Arquivo de migra√ß√£o para vers√£o {version} n√£o encontrado!")
        
        print("\n" + "=" * 60)
        print(f"‚úÖ Processo conclu√≠do! {success_count} migra√ß√£o(√µes) revertida(s).")
    
    def status(self):
        """Mostrar status das migra√ß√µes"""
        print("üìä STATUS DAS MIGRA√á√ïES")
        print("=" * 60)
        
        applied = self.get_applied_migrations()
        available = self.get_available_migrations()
        
        print(f"üóÑÔ∏è Banco de dados: {settings.DATABASE_URL}")
        print(f"üìÅ Pasta de migra√ß√µes: {self.migrations_dir}")
        print(f"üì¶ Migra√ß√µes dispon√≠veis: {len(available)}")
        print(f"‚úÖ Migra√ß√µes aplicadas: {len(applied)}")
        
        print("\nüìã DETALHES DAS MIGRA√á√ïES:")
        print("-" * 60)
        
        for migration in available:
            status = "‚úÖ APLICADA" if migration['version'] in applied else "‚è≥ PENDENTE"
            print(f"{migration['version']:<5} | {status:<12} | {migration['description']}")
        
        pending = [m for m in available if m['version'] not in applied]
        if pending:
            print(f"\n‚ö†Ô∏è {len(pending)} migra√ß√£o(√µes) pendente(s)")
        else:
            print("\nüéâ Todas as migra√ß√µes est√£o em dia!")

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) < 2:
        print("üìã USO:")
        print("  python migrate.py up           # Aplicar todas as migra√ß√µes pendentes")
        print("  python migrate.py down [N]     # Reverter as √∫ltimas N migra√ß√µes (padr√£o: 1)")
        print("  python migrate.py status       # Mostrar status das migra√ß√µes")
        return
    
    manager = MigrationManager()
    command = sys.argv[1]
    
    if command == "up":
        manager.migrate_up()
    elif command == "down":
        steps = int(sys.argv[2]) if len(sys.argv) > 2 else 1
        manager.migrate_down(steps)
    elif command == "status":
        manager.status()
    else:
        print(f"‚ùå Comando desconhecido: {command}")
        print("üí° Use: up, down ou status")

if __name__ == "__main__":
    main()